import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score, confusion_matrix
from sklearn.preprocessing import StandardScaler, LabelEncoder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
    page_icon="üìä",
    layout="wide"
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
russian_labels = {
    # –ö–æ–ª–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    'Churn': '–û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤',
    'tenure': '–°—Ä–æ–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–º–µ—Å)',
    'MonthlyCharges': '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏',
    'TotalCharges': '–û–±—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏',
    'customerID': 'ID –∫–ª–∏–µ–Ω—Ç–∞',

    # –ó–Ω–∞—á–µ–Ω–∏—è
    'Yes': '–î–∞',
    'No': '–ù–µ—Ç',

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    'Data': '–î–∞–Ω–Ω—ã–µ',
    'Analysis': '–ê–Ω–∞–ª–∏–∑',
    'Model': '–ú–æ–¥–µ–ª—å',
    'Settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    'Metrics': '–ú–µ—Ç—Ä–∏–∫–∏',
    'Feature Importance': '–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤'
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω–∏–∏")
st.markdown("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        df = pd.read_csv(r'C:\Users\Iliya\PycharmProjects\ilyailya\–ù–ò–†\data.csv')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['Churn', 'tenure', 'MonthlyCharges']
        for col in required_cols:
            if col not in df.columns:
                st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")
                return None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if 'TotalCharges' in df.columns:
            df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
            df = df.dropna(subset=['TotalCharges'])

        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = load_data()
if df is None:
    st.stop()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
test_size = st.sidebar.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ (%)", 10, 40, 20)
n_estimators = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤", 50, 200, 100)
max_depth = st.sidebar.slider("–ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤—å–µ–≤", 2, 20, 5)

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üìÅ –î–∞–Ω–Ω—ã–µ", "üìä –ê–Ω–∞–ª–∏–∑", "ü§ñ –ú–æ–¥–µ–ª—å"])

with tab1:
    st.header("1. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    st.dataframe(df.head(10).rename(columns=russian_labels), height=300)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    st.dataframe(df.describe().rename(columns=russian_labels))

with tab2:
    st.header("2. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    fig1, ax1 = plt.subplots(figsize=(8, 4))
    plot = sns.countplot(data=df, x='Churn', palette='viridis', ax=ax1)
    plot.set(xlabel=russian_labels['Churn'],
             ylabel='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
             title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –æ—Ç—Ç–æ–∫—É')
    plot.set_xticklabels([russian_labels.get(x.get_text(), x.get_text()) for x in plot.get_xticklabels()])
    st.pyplot(fig1)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    num_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å",
                           [('tenure', '–°—Ä–æ–∫ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'),
                            ('MonthlyCharges', '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏'),
                            ('TotalCharges', '–û–±—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏')],
                           format_func=lambda x: x[1])[0]

    fig2, ax2 = plt.subplots(figsize=(8, 4))
    plot = sns.histplot(data=df, x=num_col, hue='Churn', kde=True, palette='viridis', ax=ax2)
    plot.set(xlabel=russian_labels.get(num_col, num_col),
             ylabel='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
             title=f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {russian_labels.get(num_col, num_col)} –ø–æ –æ—Ç—Ç–æ–∫—É')
    plt.legend(title=russian_labels['Churn'], labels=[russian_labels['No'], russian_labels['Yes']])
    st.pyplot(fig2)

with tab3:
    st.header("3. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞")


    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    def preprocess_data(df):
        df = df.copy()

        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        df = df.drop(['customerID', 'Unnamed: 0'], axis=1, errors='ignore')

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0, '1': 1, '0': 0})

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        cat_cols = df.select_dtypes(include=['object']).columns
        le = LabelEncoder()
        for col in cat_cols:
            df[col] = le.fit_transform(df[col].astype(str))

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        num_cols = df.select_dtypes(include=['int64', 'float64']).columns.difference(['Churn'])
        scaler = StandardScaler()
        df[num_cols] = scaler.fit_transform(df[num_cols])

        return df


    processed_df = preprocess_data(df)

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    X = processed_df.drop('Churn', axis=1)
    y = processed_df['Churn']
    X_train, X_test, y_train, y_test = train_test_split(
        X, y,
        test_size=test_size / 100,
        random_state=42,
        stratify=y
    )

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = RandomForestClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth,
        random_state=42
    )
    model.fit(X_train, y_train)

    # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:, 1]

    # –ú–µ—Ç—Ä–∏–∫–∏
    st.subheader("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
    col1, col2, col3 = st.columns(3)
    col1.metric("–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", f"{accuracy_score(y_test, y_pred):.3f}")
    col2.metric("F1-–º–µ—Ä–∞", f"{f1_score(y_test, y_pred):.3f}")
    col3.metric("ROC AUC", f"{roc_auc_score(y_test, y_prob):.3f}")

    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    cm = confusion_matrix(y_test, y_pred)
    fig3, ax3 = plt.subplots(figsize=(6, 5))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax3,
                xticklabels=['–û—Å—Ç–∞–ª—Å—è', '–£—à–µ–ª'],
                yticklabels=['–û—Å—Ç–∞–ª—Å—è', '–£—à–µ–ª'])
    ax3.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å")
    ax3.set_ylabel("–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å")
    st.pyplot(fig3)

    # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏")
    importances = pd.DataFrame({
        '–ü—Ä–∏–∑–Ω–∞–∫': X.columns,
        '–í–∞–∂–Ω–æ—Å—Ç—å': model.feature_importances_
    }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False).head(10)

    fig4, ax4 = plt.subplots(figsize=(10, 6))
    sns.barplot(data=importances, x='–í–∞–∂–Ω–æ—Å—Ç—å', y='–ü—Ä–∏–∑–Ω–∞–∫', ax=ax4, palette='viridis')
    ax4.set_title("–¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    ax4.set_xlabel("–í–∞–∂–Ω–æ—Å—Ç—å")
    ax4.set_ylabel("–ü—Ä–∏–∑–Ω–∞–∫")
    st.pyplot(fig4)

# –ü–æ–¥–≤–∞–ª
st.sidebar.markdown("---")
st.sidebar.info("""
**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**  
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.  
–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
""")
